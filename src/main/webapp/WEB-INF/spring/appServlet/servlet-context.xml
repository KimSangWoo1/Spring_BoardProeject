<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!--  XML 설정 방법 -->
	<!--1. 패키지안에 클래스들을 스캔하고 , 빈 인스턴스를 생성  -->
	<context:component-scan base-package="com.test.myapp" />
	<!-- <context:component-scan base-package="com.test.myapp.SimpleTest" /> 다른 패키지 추가할 경우 -->
	
	<!--2. xml에 어플리케이션 컨텍스트안에 이미 등록된 빈들의 어노테이션을 활성화를 위해 사용된다.
		이미 스프링 컨텍스트에 의해 생성되어 저장된  빈들에 대해서  @Autowired and @Qualifier 어노테이션을 해석할거란 얘기
			<context:annotation-config/> 태그는 어노테이션과 관련해서 다음의 BeanPostProcessor를 등록해 준다.
			- RequredAnnotationBeanPostProcessor: @Required 어노테이션 처리
			- AutowiredAnnotationBeanPostProcessor:@Autiwired 어노테이션 처리
			- CommonAnnotationBeanPostProcessor: @Ressource, @PostConstruct, @PreDestroy 어노테이션 처리
			- ConfigurationClassProcessor: @Configuration 어노테이션 처리
		<context:annotation-config/>   -->
		 
	<!--3. ??? 
		<mvc:annotation-driven/> -->
	
	<!-- 인터셉터 설정 -->
	<interceptors>
		<interceptor>
			<mapping path="/interceptor/doA"/>
			<mapping path="/interceptor/doB"/>
			<beans:bean id="sampleInterceptor" class="com.test.myapp.tutorial.interceptor.SampleInterceptor"/>
		</interceptor>
		<!-- 다른 인터셉터 추가시 -->
		<!--  여기다가 <interceptor> 태그 추가해서 넣으면 됨 -->
	</interceptors>
</beans:beans>

